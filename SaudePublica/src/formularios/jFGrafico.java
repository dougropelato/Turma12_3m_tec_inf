/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package formularios;

import dao.GenericDao;
import java.awt.BorderLayout;
import java.awt.Color;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import tabelas.Humanos;
import tabelas.NumeroCidade;
import tabelas.cidade;

/**
 *
 * @author Fernando
 */
public class jFGrafico extends javax.swing.JFrame {
    int numeroCidades = 5;
   
    public jFGrafico() throws SQLException, ClassNotFoundException, IllegalAccessException, NoSuchMethodException, IllegalArgumentException, InvocationTargetException, InstantiationException {
        initComponents();
        gráfico();
        this.setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPGrafico = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPGrafico.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPGraficoLayout = new javax.swing.GroupLayout(jPGrafico);
        jPGrafico.setLayout(jPGraficoLayout);
        jPGraficoLayout.setHorizontalGroup(
            jPGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 572, Short.MAX_VALUE)
        );
        jPGraficoLayout.setVerticalGroup(
            jPGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        jButton1.setText("Voltar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel1.setText("Gráfico Infomativo");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jPGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(222, 222, 222)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(316, 316, 316)
                        .addComponent(jButton1)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new jFRelatorioseGraficos().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jFGrafico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jFGrafico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jFGrafico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jFGrafico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new jFGrafico().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(jFGrafico.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(jFGrafico.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(jFGrafico.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NoSuchMethodException ex) {
                    Logger.getLogger(jFGrafico.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalArgumentException ex) {
                    Logger.getLogger(jFGrafico.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InvocationTargetException ex) {
                    Logger.getLogger(jFGrafico.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(jFGrafico.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPGrafico;
    // End of variables declaration//GEN-END:variables

    
    public void gráfico() throws SQLException, ClassNotFoundException, IllegalAccessException, NoSuchMethodException, IllegalArgumentException, InvocationTargetException, InstantiationException{
    GenericDao dao = new GenericDao();
     List Teste = dao.listar(Humanos.class); // Lista criada que contem as informaçoes dos Alunos do Banco de Dados  
     
     List cidade = dao.listar(cidade.class); // Lista criada que contem as informaçoes das cidades do Banco de Dados
     List<cidade> todasCidades = cidade;          // Lista criada para poder referenciar um objeto e usar as informaçoes da lista cidade
     
     List<cidade> cidadesUsadas = new ArrayList();
     List<NumeroCidade> contagemCidades = new ArrayList();
     List<NumeroCidade> ordemGrafico = new ArrayList();
     
// Esse for tem como objetivo descobrir quais as cidades que "nao" tem seu codigo usado/referenciado na tabela Alunos, deixando as que tem referencia em uma List
     for (int i = 0; i < Teste.size(); i++) { 
            
            List<Humanos> lal = Teste; //Cria uma List de tipo Alunos para poder usar o conteudo da tabela Alunos
            Humanos test = lal.get(i);
            
            for (int j = 0; j < todasCidades.size(); j++) {  
                cidade cidades = todasCidades.get(j);
                if (cidades.getCod_cidade()== test.getCod_cidade()) { // Identifica a cidade que foi usada para por esse Aluno e criando um objeto o adiciona a uma List
                    cidade guarda = new cidade();
                    guarda.setCod_cidade(test.getCod_cidade());
                    guarda.setNome_cidade(cidades.getNome_cidade());
                    cidadesUsadas.add(guarda);
                }
            }
        }
    
    // Esse for tem como objetivo contar "quantas" vezes cada cidade foi referenciada na tabela Alunos e guarda as informação em uma List 
     for (int i = 0; i < todasCidades.size(); i++) { 
         NumeroCidade numero;                        /* instancia um objeto do tipo NumeroCidade, objeto tal que foi criado manualmente para 
                   esse método e contem os parametros numero e nome onde serao colocados o nome da cidade e quantas vezes cada uma foi usada */
         cidade cidades = todasCidades.get(i);
          int contar = 0; 
            for (int j = 0; j < cidadesUsadas.size(); j++) {
                cidade usadas = cidadesUsadas.get(j);
                if (usadas.getCod_cidade() == cidades.getCod_cidade()) { // alimenta a variavel cada vez que a cidade encontrada for encontrada
                 contar++; //variavel ira conter quantas vezes a cidade foi usada
                }
            }
           numero = new NumeroCidade();
           numero.setNumero(contar);                            
           numero.setNome_cidade(cidades.getNome_cidade());
           contagemCidades.add(numero);                                              
    }
     
  
     
     // esse for tem como objetivo colocar as cidades em sequencia da maior para a menor no grafico 
      for (int s = 0; s < numeroCidades; s++) { //  esse for define quantas cidades irao estar no  grafico
          NumeroCidade teste;
          int aux = 0;
          int pegarLinha = 0;
        
            for (int i = 0; i < contagemCidades.size(); i++) { // for serve para percorrer toda a List que contem as cidades e quantas vezes foram usadas
                boolean seila = true;
                 teste = contagemCidades.get(i);
                  if (aux < teste.getNumero() ) { // if para serve pegar sempre a cidades com maior numero(vezes referenciado na tabela alunos)
                     for (int j = 0; j < ordemGrafico.size(); j++) { 
                          NumeroCidade ordem = ordemGrafico.get(j);
                              if(teste.getNome_cidade().equals(ordem.getNome_cidade())){ //  esse if serve para descobrir se a cidade em questao ja esta adicionada na List do Grafico
                                  seila = false;
                              }
                      } 
                     if (seila) {                             // se parametros forem verdadeiros esse if é executado
                                  aux= teste.getNumero();     
                                  pegarLinha = i;            // pega a linha da List contagemCidades  para depois poder saber qual e a cidade que precisa ser add na outra List
                     }

                  }
              }
            teste= contagemCidades.get(pegarLinha);
            ordemGrafico.add(teste);
      }
      
       DefaultCategoryDataset dataset = new DefaultCategoryDataset();
      // esse for monta o grafico
      for (int i = 0; i < ordemGrafico.size(); i++) {
          NumeroCidade teste = ordemGrafico.get(i);
          System.out.println(teste.getNome_cidade());
          int numero = teste.getNumero();
          dataset.setValue(numero, "", teste.getNome_cidade());
          System.out.println("testeeeeee");
          
           JFreeChart chart = ChartFactory.createBarChart("Pessoas por Cidade", "", "", dataset, PlotOrientation.VERTICAL, false, false, false);
        CategoryPlot catPlot = chart.getCategoryPlot();
        catPlot.setRangeGridlinePaint(Color.BLACK);
        
        ChartPanel qualquercoisa = new ChartPanel(chart);
        qualquercoisa.setSize(jPGrafico.getWidth(),jPGrafico.getHeight());
        qualquercoisa.setVisible(true);
        jPGrafico.removeAll();
        jPGrafico.add(qualquercoisa, BorderLayout.CENTER);
        jPGrafico.revalidate();
        jPGrafico.repaint();
    }
}

    
}


