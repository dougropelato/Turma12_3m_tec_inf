/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package formularios;

import dao.GenericDao;
import java.awt.BorderLayout;
import java.awt.Color;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import tabelas.Contagem;
import tabelas.Humanos;

/**
 *
 * @author Eduardo
 */
public class jFRelatórioRanking extends javax.swing.JFrame {
    int x = 3;

    /**
     * Creates new form jFRelatórioRanking
     */
    public jFRelatórioRanking() {
        initComponents();
        this.setLocationRelativeTo(this);
        try {
            mostraranking();
        } catch (SQLException ex) {
            Logger.getLogger(jFRelatórioRanking.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(jFRelatórioRanking.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(jFRelatórioRanking.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(jFRelatórioRanking.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(jFRelatórioRanking.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(jFRelatórioRanking.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(jFRelatórioRanking.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPGrafico = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Relatório Ranking");

        jButton1.setText("Menu");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPGraficoLayout = new javax.swing.GroupLayout(jPGrafico);
        jPGrafico.setLayout(jPGraficoLayout);
        jPGraficoLayout.setHorizontalGroup(
            jPGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPGraficoLayout.setVerticalGroup(
            jPGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 227, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(102, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100))
            .addGroup(layout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
        new jFTelaPrincipal().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jFRelatórioRanking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jFRelatórioRanking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jFRelatórioRanking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jFRelatórioRanking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jFRelatórioRanking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPGrafico;
    // End of variables declaration//GEN-END:variables

public void mostraranking() throws SQLException, ClassNotFoundException, IllegalAccessException, NoSuchMethodException, IllegalArgumentException, 
        InvocationTargetException, InstantiationException{
    
    GenericDao dao = new GenericDao();
    
    List h = dao.listar(Humanos.class);
    List<Humanos> todosHumanos = h; 
    
    List<Contagem> cont = new ArrayList();
    
    List<Contagem> ordemGrafico = new ArrayList();
    
    for (int i = 0; i < h.size(); i++) {
        Humanos objetoHuamno = todosHumanos.get(i);
        Contagem contagem = new Contagem();
        contagem.setNome_cidade(objetoHuamno.getNome());
        contagem.setNumero(objetoHuamno.getRanking());
        cont.add(contagem);
    }            
    
    for (int s = 0; s < x; s++) { //  esse for define quantas cidades irao estar no  grafico
          Contagem teste;
          int aux = 0;
          int pegarLinha = 0;
        
            for (int i = 0; i < todosHumanos.size(); i++) { // for serve para percorrer toda a List que contem as cidades e quantas vezes foram usadas
                boolean seila = true;
                 teste = cont.get(i);
                  if (aux < teste.getNumero() ) { // if para serve pegar sempre a cidades com maior numero(vezes referenciado na tabela alunos)
                     for (int j = 0; j < ordemGrafico.size(); j++) { 
                          Contagem ordem = ordemGrafico.get(j);
                              if(teste.getNome_cidade().equals(ordem.getNome_cidade())){ //  esse if serve para descobrir se a cidade em questao ja esta adicionada na List do Grafico
                                  seila = false;
                              }
                      } 
                     if (seila) {                             // se parametros forem verdadeiros esse if é executado
                                  aux= teste.getNumero();     
                                  pegarLinha = i;            // pega a linha da List contagemCidades  para depois poder saber qual e a cidade que precisa ser add na outra List
                     }

                  }
              }
            teste= cont.get(pegarLinha);
            ordemGrafico.add(teste);
      }

       DefaultCategoryDataset dataset = new DefaultCategoryDataset();
      // esse for monta o grafico
      for (int i = 0; i < ordemGrafico.size(); i++) {
          Contagem teste = ordemGrafico.get(i);
          System.out.println(teste.getNome_cidade());
          int numero = teste.getNumero();
          dataset.setValue(numero, "", teste.getNome_cidade());
          System.out.println("testeeeeee");
          
           JFreeChart chart = ChartFactory.createBarChart("Pessoas por Cidade", "", "", dataset, PlotOrientation.VERTICAL, false, false, false);
        CategoryPlot catPlot = chart.getCategoryPlot();
        catPlot.setRangeGridlinePaint(Color.BLACK);
        
        ChartPanel qualquercoisa = new ChartPanel(chart);
        qualquercoisa.setSize(jPGrafico.getWidth(),jPGrafico.getHeight());
        qualquercoisa.setVisible(true);
        jPGrafico.removeAll();
        jPGrafico.add(qualquercoisa, BorderLayout.CENTER);
        jPGrafico.revalidate();
        jPGrafico.repaint();
    }

}


}

